/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package socketio;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.ListModel;

/**
 *
 * @author ngocnt
 */
public class ManagerChatter extends javax.swing.JFrame implements Runnable {

    ServerSocket srvSocket;
    ArrayList<Client> clients;
    Vector<String> clientsName;
    boolean listOnlineChanged = false;

    public ManagerChatter() {
        initComponents();
        this.setSize(600, 500);
        clients = new ArrayList<>();
//        clientsName = new ArrayList<>();
        try {
            srvSocket = new ServerSocket(1111);

        } catch (IOException ex) {
            ex.printStackTrace();
        }
        Thread t = new Thread(this);
        t.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblMamagerPort = new javax.swing.JLabel();
        txtServerPort = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        listClients = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(new java.awt.GridLayout(1, 0));

        lblMamagerPort.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblMamagerPort.setText("Manager Port: ");
        jPanel1.add(lblMamagerPort);

        txtServerPort.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtServerPort.setText("1111");
        txtServerPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtServerPortActionPerformed(evt);
            }
        });
        jPanel1.add(txtServerPort);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        txtMessages.setColumns(20);
        txtMessages.setRows(5);
        jScrollPane1.setViewportView(txtMessages);

        jTabbedPane1.addTab("tab1", jScrollPane1);

        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        listClients.setViewportView(list);

        getContentPane().add(listClients, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtServerPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtServerPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtServerPortActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerChatter.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ManagerChatter().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblMamagerPort;
    private javax.swing.JList<String> list;
    private javax.swing.JScrollPane listClients;
    private javax.swing.JTextArea txtMessages;
    private javax.swing.JTextField txtServerPort;
    // End of variables declaration//GEN-END:variables

    public Client search(ArrayList<Client> clients, String name) {
        for (Client client : clients) {
            if (client.name.equals(name)) {
                return client;
            }
        }
        return null;
    }

    @Override
    public void run() {
        while (true) {
            try {
                //accept client
                Socket aClientSocket = srvSocket.accept();

                clientsName = new Vector<>();
                ListModel<String> test = list.getModel();
                for (int i = 0; i < test.getSize(); i++) {
                    clientsName.add(test.getElementAt(i));
                }
                
                //get name from client
                ObjectInputStream objIn = new ObjectInputStream(aClientSocket.getInputStream());
                String clientInfo = (String) objIn.readObject();
                txtMessages.append(clientInfo + " accept\n");

                //split string into 2 part
                //name and mark path
                //-chat: chatSocket
                //-file: fileSocket
                //-listClients: listClientsSocket to receive list clients are connecting
                StringTokenizer stk = new StringTokenizer(clientInfo, "-");
                String name = stk.nextToken();
                String mark = stk.nextToken();

                Client client = search(clients, name);
                if (client == null) {
                    client = new Client(name);
                    clients.add(client);
                    clientsName.add(name);
                    //reset data for JList
                    list.setListData(clientsName);
                }

                ObjectOutputStream objOut = new ObjectOutputStream(aClientSocket.getOutputStream());

                switch (mark) {
                    case "chat":
                        client.setObjOutMsg(objOut);
                        ServerReadThread srt = new ServerReadThread(txtMessages, objIn, clients, name, list);
                        Thread t = new Thread(srt);
                        t.start();
                        break;
                    case "file":
                        client.setObjOutFile(objOut);
                        ServerReadFileThread srft = new ServerReadFileThread(txtMessages, clients, objIn);
                        Thread ft = new Thread(srft);
                        ft.start();
                        break;
                    case "list":
                        client.setObjOutListClients(objOut);
                        listOnlineChanged = true;
                        break;
                    default:
                        break;
                }

                if (listOnlineChanged) {
                    for (Client c : clients) {
                        c.objOutListClients.writeObject(clientsName);
                        c.objOutListClients.flush();
                        txtMessages.append("Send list client for " + c.name + "\n");
                        c.objOutListClients.reset();
                    }
                    listOnlineChanged = false;
                }

            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

    }

}
